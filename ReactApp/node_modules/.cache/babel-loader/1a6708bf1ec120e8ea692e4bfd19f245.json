{"ast":null,"code":"import { createApi as rktCreateApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport queryString from 'query-string';\n\nconst camelize = value => {\n  return value.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, (match, index) => {\n    if (+match === 0) {\n      return '';\n    } else {\n      return index === 0 ? match.toLowerCase() : match.toUpperCase();\n    }\n  });\n};\n\nconst normalizeQueryParameters = function () {\n  let {\n    filter,\n    order = [],\n    pagination = {}\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const condition = order.at(-1) || {};\n  const key = Object.keys(condition).at(0);\n  const value = condition[key];\n  return { ...filter,\n    Sort: key && value ? `${key} ${value}` : undefined,\n    Page: pagination.index !== undefined ? pagination.index + 1 : pagination.index,\n    PageSize: pagination.size\n  };\n};\n\nconst normalizeErrors = errors => {\n  return Object.entries(errors).reduce((errors, _ref) => {\n    let [key, value] = _ref;\n    return { ...errors,\n      [camelize(key)]: value\n    };\n  }, {});\n};\n\nexport default function createApi(_ref2) {\n  let {\n    url,\n    tagTypes = [],\n    endpoints,\n    ...options\n  } = _ref2;\n  const apiTagType = options.reducerPath;\n  return rktCreateApi({\n    baseQuery: fetchBaseQuery({\n      baseUrl: url,\n      prepareHeaders: (headers, _ref3) => {\n        let {\n          getState\n        } = _ref3;\n        const token = getState().auth.token;\n\n        if (token) {\n          headers.set('authorization', `Bearer ${token}`);\n        }\n\n        return headers;\n      },\n      paramsSerializer: params => queryString.stringify(params)\n    }),\n    tagTypes: [...tagTypes, apiTagType],\n    endpoints: rktBuilder => {\n      const builder = { ...rktBuilder,\n        normalizeQueryParameters: normalizeQueryParameters,\n        normalizeErrors: normalizeErrors,\n        tagType: apiTagType,\n        add: () => rktBuilder.mutation({\n          query: item => ({\n            url: '',\n            method: 'POST',\n            body: item,\n            responseHandler: response => {\n              if (response.ok) {\n                return response.json();\n              } else {\n                return response.json().then(response => normalizeErrors(response.errors));\n              }\n            }\n          }),\n          invalidatesTags: [{\n            type: apiTagType,\n            id: '*'\n          }]\n        }),\n        delete: () => rktBuilder.mutation({\n          query: Id => ({\n            url: '',\n            method: 'DELETE',\n            params: {\n              Id: Id\n            },\n            responseHandler: response => {\n              if (response.ok) {\n                return response.text();\n              } else {\n                return response.json().then(response => normalizeErrors(response.errors));\n              }\n            }\n          }),\n          transformResponse: response => ({\n            message: response\n          }),\n          invalidatesTags: (result, error, id) => [{\n            type: apiTagType,\n            id: id\n          }]\n        }),\n        update: () => rktBuilder.mutation({\n          query: item => ({\n            url: '',\n            method: 'PUT',\n            body: item,\n            responseHandler: response => {\n              if (response.ok) {\n                return response.text();\n              } else {\n                return response.json().then(response => normalizeErrors(response.errors));\n              }\n            }\n          }),\n          transformResponse: response => ({\n            message: response\n          }),\n          invalidatesTags: (result, error, item) => [{\n            type: apiTagType,\n            id: item.id\n          }]\n        }),\n        get: () => rktBuilder.query({\n          query: id => ({\n            url: '',\n            params: {\n              id\n            }\n          }),\n          providesTags: (result, error, id) => [{\n            type: apiTagType,\n            id: id\n          }],\n          transformResponse: response => {\n            if (response.Status == 0) {\n              return response.DataObject;\n            } else {\n              return response.json().then(response => normalizeErrors(response.errors));\n            }\n          }\n        }),\n        getItems: () => rktBuilder.query({\n          query: function () {\n            let {\n              filter,\n              order = [],\n              pagination = {}\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            return {\n              url: 'Items',\n              params: normalizeQueryParameters({\n                filter,\n                order,\n                pagination\n              })\n            };\n          },\n          providesTags: result => {\n            if (result) {\n              return [...result.map(_ref4 => {\n                let {\n                  id\n                } = _ref4;\n                return {\n                  type: apiTagType,\n                  id\n                };\n              }), {\n                type: apiTagType,\n                id: '*'\n              }];\n            } else {\n              return [{\n                type: apiTagType,\n                id: '*'\n              }];\n            }\n          }\n        }),\n        getList: () => rktBuilder.query({\n          query: function () {\n            let {\n              filter,\n              order = [],\n              pagination = {}\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            return {\n              url: 'List',\n              params: normalizeQueryParameters({\n                filter,\n                order,\n                pagination\n              })\n            };\n          },\n          transformResponse: response => ({\n            data: response.DataObject,\n            length: response.DataObject.length\n          }),\n          providesTags: result => {\n            if (result !== null && result !== void 0 && result.data) {\n              return [...result.data.map(_ref5 => {\n                let {\n                  id\n                } = _ref5;\n                return {\n                  type: apiTagType,\n                  id\n                };\n              }), {\n                type: apiTagType,\n                id: '*'\n              }];\n            } else {\n              return [{\n                type: apiTagType,\n                id: '*'\n              }];\n            }\n          }\n        })\n      };\n      return endpoints(builder);\n    },\n    ...options\n  });\n}","map":{"version":3,"names":["createApi","rktCreateApi","fetchBaseQuery","queryString","camelize","value","replace","match","index","toLowerCase","toUpperCase","normalizeQueryParameters","filter","order","pagination","condition","at","key","Object","keys","Sort","undefined","Page","PageSize","size","normalizeErrors","errors","entries","reduce","url","tagTypes","endpoints","options","apiTagType","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","getState","token","auth","set","paramsSerializer","params","stringify","rktBuilder","builder","tagType","add","mutation","query","item","method","body","responseHandler","response","ok","json","then","invalidatesTags","type","id","delete","Id","text","transformResponse","message","result","error","update","get","providesTags","Status","DataObject","getItems","map","getList","data","length"],"sources":["C:/Proyectos/NosPremiamos/ReactApp/src/redux/createApi.js"],"sourcesContent":["import { createApi as rktCreateApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\nimport queryString from 'query-string';\r\n\r\nconst camelize = (value) => {\r\n  return value.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, (match, index) => {\r\n    if (+match === 0) {\r\n      return '';\r\n    }\r\n    else {\r\n      return index === 0 ? match.toLowerCase() : match.toUpperCase();\r\n    }\r\n  });\r\n};\r\n\r\nconst normalizeQueryParameters = ({ filter, order = [], pagination = {} } = {}) => {\r\n  const condition = order.at(-1) || {};\r\n  const key = Object.keys(condition).at(0);\r\n  const value = condition[key];\r\n\r\n  return {\r\n    ...filter,\r\n    Sort: (key && value) ? `${key} ${value}` : undefined,\r\n    Page: (pagination.index !== undefined) ? pagination.index + 1 : pagination.index,\r\n    PageSize: pagination.size\r\n  };\r\n};\r\n\r\nconst normalizeErrors = (errors) => {\r\n  return Object.entries(errors).reduce((errors, [key, value]) => {\r\n    return {\r\n      ...errors,\r\n      [camelize(key)]: value\r\n    };\r\n  }, {});\r\n};\r\n\r\nexport default function createApi({ url, tagTypes = [], endpoints, ...options }) {\r\n  const apiTagType = options.reducerPath;\r\n\r\n  return rktCreateApi({\r\n    baseQuery: fetchBaseQuery({\r\n      baseUrl: url,\r\n      prepareHeaders: (headers, { getState }) => {\r\n        const token = getState().auth.token;\r\n        if (token) {\r\n          headers.set('authorization', `Bearer ${token}`);\r\n        }\r\n        return headers;\r\n      },\r\n      paramsSerializer: (params) => queryString.stringify(params)\r\n    }),\r\n    tagTypes: [\r\n      ...tagTypes,\r\n      apiTagType\r\n    ],\r\n    endpoints: (rktBuilder) => {\r\n      const builder = {\r\n        ...rktBuilder,\r\n        normalizeQueryParameters: normalizeQueryParameters,\r\n        normalizeErrors: normalizeErrors,\r\n        tagType: apiTagType,\r\n        add: () => rktBuilder.mutation({\r\n          query: (item) => ({\r\n            url: '',\r\n            method: 'POST',\r\n            body: item,\r\n            responseHandler: (response) => {\r\n              if (response.ok) {\r\n                return response.json();\r\n              }\r\n              else {\r\n                return response.json().then((response) => normalizeErrors(response.errors));\r\n              }\r\n            }\r\n          }),\r\n          invalidatesTags: [{ type: apiTagType, id: '*' }]\r\n        }),\r\n        delete: () => rktBuilder.mutation({\r\n          query: (Id) => ({\r\n            url: '',\r\n            method: 'DELETE',\r\n            params: {\r\n              Id: Id\r\n            },\r\n            responseHandler: (response) => {\r\n              if (response.ok) {\r\n                return response.text();\r\n              }\r\n              else {\r\n                return response.json().then((response) => normalizeErrors(response.errors));\r\n              }\r\n            }\r\n          }),\r\n          transformResponse: (response) => ({ message: response }),\r\n          invalidatesTags: (result, error, id) => [{ type: apiTagType, id: id }]\r\n        }),\r\n        update: () => rktBuilder.mutation({\r\n          query: (item) => ({\r\n            url: '',\r\n            method: 'PUT',\r\n            body: item,\r\n            responseHandler: (response) => {\r\n              if (response.ok) {\r\n                return response.text();\r\n              }\r\n              else {\r\n                return response.json().then((response) => normalizeErrors(response.errors));\r\n              }\r\n            }\r\n          }),\r\n          transformResponse: (response) => ({ message: response }),\r\n          invalidatesTags: (result, error, item) => [{ type: apiTagType, id: item.id }]\r\n        }),\r\n        get: () => rktBuilder.query({\r\n          query: (id) => ({\r\n            url: '',\r\n            params: {\r\n               id\r\n            }\r\n          }),\r\n          providesTags: (result, error, id) => ([{ type: apiTagType, id: id }]),\r\n            transformResponse: (response) => {\r\n              if (response.Status == 0) {\r\n                return response.DataObject;\r\n              }\r\n              else {\r\n                return response.json().then((response) => normalizeErrors(response.errors));\r\n              }\r\n            }\r\n        }),\r\n        getItems: () => rktBuilder.query({\r\n          query: ({ filter, order = [], pagination = {} } = {}) => ({\r\n            url: 'Items',\r\n            params: normalizeQueryParameters({ filter, order, pagination })\r\n          }),\r\n          providesTags: (result) => {\r\n            if (result) {\r\n              return [...result.map(({ id }) => ({ type: apiTagType, id })), { type: apiTagType, id: '*' }];\r\n            }\r\n            else {\r\n              return [{ type: apiTagType, id: '*' }];\r\n            }\r\n          }\r\n        }),\r\n        getList: () => rktBuilder.query({\r\n          query: ({ filter, order = [], pagination = {} } = {}) => {\r\n            return ({\r\n              url: 'List',\r\n              params: normalizeQueryParameters({ filter, order, pagination })\r\n            })\r\n          },\r\n          transformResponse: (response) => ({\r\n            data: response.DataObject,\r\n            length: response.DataObject.length\r\n          }),\r\n          providesTags: (result) => {\r\n            if (result?.data) {\r\n              return [...result.data.map(({ id }) => ({ type: apiTagType, id })), { type: apiTagType, id: '*' }];\r\n            }\r\n            else {\r\n              return [{ type: apiTagType, id: '*' }];\r\n            }\r\n          }\r\n        })\r\n      };\r\n\r\n      return endpoints(builder);\r\n    },\r\n    ...options\r\n  });\r\n}"],"mappings":"AAAA,SAASA,SAAS,IAAIC,YAAtB,EAAoCC,cAApC,QAA0D,8BAA1D;AACA,OAAOC,WAAP,MAAwB,cAAxB;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAC1B,OAAOA,KAAK,CAACC,OAAN,CAAc,yBAAd,EAAyC,CAACC,KAAD,EAAQC,KAAR,KAAkB;IAChE,IAAI,CAACD,KAAD,KAAW,CAAf,EAAkB;MAChB,OAAO,EAAP;IACD,CAFD,MAGK;MACH,OAAOC,KAAK,KAAK,CAAV,GAAcD,KAAK,CAACE,WAAN,EAAd,GAAoCF,KAAK,CAACG,WAAN,EAA3C;IACD;EACF,CAPM,CAAP;AAQD,CATD;;AAWA,MAAMC,wBAAwB,GAAG,YAAkD;EAAA,IAAjD;IAAEC,MAAF;IAAUC,KAAK,GAAG,EAAlB;IAAsBC,UAAU,GAAG;EAAnC,CAAiD,uEAAP,EAAO;EACjF,MAAMC,SAAS,GAAGF,KAAK,CAACG,EAAN,CAAS,CAAC,CAAV,KAAgB,EAAlC;EACA,MAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYJ,SAAZ,EAAuBC,EAAvB,CAA0B,CAA1B,CAAZ;EACA,MAAMX,KAAK,GAAGU,SAAS,CAACE,GAAD,CAAvB;EAEA,OAAO,EACL,GAAGL,MADE;IAELQ,IAAI,EAAGH,GAAG,IAAIZ,KAAR,GAAkB,GAAEY,GAAI,IAAGZ,KAAM,EAAjC,GAAqCgB,SAFtC;IAGLC,IAAI,EAAGR,UAAU,CAACN,KAAX,KAAqBa,SAAtB,GAAmCP,UAAU,CAACN,KAAX,GAAmB,CAAtD,GAA0DM,UAAU,CAACN,KAHtE;IAILe,QAAQ,EAAET,UAAU,CAACU;EAJhB,CAAP;AAMD,CAXD;;AAaA,MAAMC,eAAe,GAAIC,MAAD,IAAY;EAClC,OAAOR,MAAM,CAACS,OAAP,CAAeD,MAAf,EAAuBE,MAAvB,CAA8B,CAACF,MAAD,WAA0B;IAAA,IAAjB,CAACT,GAAD,EAAMZ,KAAN,CAAiB;IAC7D,OAAO,EACL,GAAGqB,MADE;MAEL,CAACtB,QAAQ,CAACa,GAAD,CAAT,GAAiBZ;IAFZ,CAAP;EAID,CALM,EAKJ,EALI,CAAP;AAMD,CAPD;;AASA,eAAe,SAASL,SAAT,QAAkE;EAAA,IAA/C;IAAE6B,GAAF;IAAOC,QAAQ,GAAG,EAAlB;IAAsBC,SAAtB;IAAiC,GAAGC;EAApC,CAA+C;EAC/E,MAAMC,UAAU,GAAGD,OAAO,CAACE,WAA3B;EAEA,OAAOjC,YAAY,CAAC;IAClBkC,SAAS,EAAEjC,cAAc,CAAC;MACxBkC,OAAO,EAAEP,GADe;MAExBQ,cAAc,EAAE,CAACC,OAAD,YAA2B;QAAA,IAAjB;UAAEC;QAAF,CAAiB;QACzC,MAAMC,KAAK,GAAGD,QAAQ,GAAGE,IAAX,CAAgBD,KAA9B;;QACA,IAAIA,KAAJ,EAAW;UACTF,OAAO,CAACI,GAAR,CAAY,eAAZ,EAA8B,UAASF,KAAM,EAA7C;QACD;;QACD,OAAOF,OAAP;MACD,CARuB;MASxBK,gBAAgB,EAAGC,MAAD,IAAYzC,WAAW,CAAC0C,SAAZ,CAAsBD,MAAtB;IATN,CAAD,CADP;IAYlBd,QAAQ,EAAE,CACR,GAAGA,QADK,EAERG,UAFQ,CAZQ;IAgBlBF,SAAS,EAAGe,UAAD,IAAgB;MACzB,MAAMC,OAAO,GAAG,EACd,GAAGD,UADW;QAEdnC,wBAAwB,EAAEA,wBAFZ;QAGdc,eAAe,EAAEA,eAHH;QAIduB,OAAO,EAAEf,UAJK;QAKdgB,GAAG,EAAE,MAAMH,UAAU,CAACI,QAAX,CAAoB;UAC7BC,KAAK,EAAGC,IAAD,KAAW;YAChBvB,GAAG,EAAE,EADW;YAEhBwB,MAAM,EAAE,MAFQ;YAGhBC,IAAI,EAAEF,IAHU;YAIhBG,eAAe,EAAGC,QAAD,IAAc;cAC7B,IAAIA,QAAQ,CAACC,EAAb,EAAiB;gBACf,OAAOD,QAAQ,CAACE,IAAT,EAAP;cACD,CAFD,MAGK;gBACH,OAAOF,QAAQ,CAACE,IAAT,GAAgBC,IAAhB,CAAsBH,QAAD,IAAc/B,eAAe,CAAC+B,QAAQ,CAAC9B,MAAV,CAAlD,CAAP;cACD;YACF;UAXe,CAAX,CADsB;UAc7BkC,eAAe,EAAE,CAAC;YAAEC,IAAI,EAAE5B,UAAR;YAAoB6B,EAAE,EAAE;UAAxB,CAAD;QAdY,CAApB,CALG;QAqBdC,MAAM,EAAE,MAAMjB,UAAU,CAACI,QAAX,CAAoB;UAChCC,KAAK,EAAGa,EAAD,KAAS;YACdnC,GAAG,EAAE,EADS;YAEdwB,MAAM,EAAE,QAFM;YAGdT,MAAM,EAAE;cACNoB,EAAE,EAAEA;YADE,CAHM;YAMdT,eAAe,EAAGC,QAAD,IAAc;cAC7B,IAAIA,QAAQ,CAACC,EAAb,EAAiB;gBACf,OAAOD,QAAQ,CAACS,IAAT,EAAP;cACD,CAFD,MAGK;gBACH,OAAOT,QAAQ,CAACE,IAAT,GAAgBC,IAAhB,CAAsBH,QAAD,IAAc/B,eAAe,CAAC+B,QAAQ,CAAC9B,MAAV,CAAlD,CAAP;cACD;YACF;UAba,CAAT,CADyB;UAgBhCwC,iBAAiB,EAAGV,QAAD,KAAe;YAAEW,OAAO,EAAEX;UAAX,CAAf,CAhBa;UAiBhCI,eAAe,EAAE,CAACQ,MAAD,EAASC,KAAT,EAAgBP,EAAhB,KAAuB,CAAC;YAAED,IAAI,EAAE5B,UAAR;YAAoB6B,EAAE,EAAEA;UAAxB,CAAD;QAjBR,CAApB,CArBA;QAwCdQ,MAAM,EAAE,MAAMxB,UAAU,CAACI,QAAX,CAAoB;UAChCC,KAAK,EAAGC,IAAD,KAAW;YAChBvB,GAAG,EAAE,EADW;YAEhBwB,MAAM,EAAE,KAFQ;YAGhBC,IAAI,EAAEF,IAHU;YAIhBG,eAAe,EAAGC,QAAD,IAAc;cAC7B,IAAIA,QAAQ,CAACC,EAAb,EAAiB;gBACf,OAAOD,QAAQ,CAACS,IAAT,EAAP;cACD,CAFD,MAGK;gBACH,OAAOT,QAAQ,CAACE,IAAT,GAAgBC,IAAhB,CAAsBH,QAAD,IAAc/B,eAAe,CAAC+B,QAAQ,CAAC9B,MAAV,CAAlD,CAAP;cACD;YACF;UAXe,CAAX,CADyB;UAchCwC,iBAAiB,EAAGV,QAAD,KAAe;YAAEW,OAAO,EAAEX;UAAX,CAAf,CAda;UAehCI,eAAe,EAAE,CAACQ,MAAD,EAASC,KAAT,EAAgBjB,IAAhB,KAAyB,CAAC;YAAES,IAAI,EAAE5B,UAAR;YAAoB6B,EAAE,EAAEV,IAAI,CAACU;UAA7B,CAAD;QAfV,CAApB,CAxCA;QAyDdS,GAAG,EAAE,MAAMzB,UAAU,CAACK,KAAX,CAAiB;UAC1BA,KAAK,EAAGW,EAAD,KAAS;YACdjC,GAAG,EAAE,EADS;YAEde,MAAM,EAAE;cACLkB;YADK;UAFM,CAAT,CADmB;UAO1BU,YAAY,EAAE,CAACJ,MAAD,EAASC,KAAT,EAAgBP,EAAhB,KAAwB,CAAC;YAAED,IAAI,EAAE5B,UAAR;YAAoB6B,EAAE,EAAEA;UAAxB,CAAD,CAPZ;UAQxBI,iBAAiB,EAAGV,QAAD,IAAc;YAC/B,IAAIA,QAAQ,CAACiB,MAAT,IAAmB,CAAvB,EAA0B;cACxB,OAAOjB,QAAQ,CAACkB,UAAhB;YACD,CAFD,MAGK;cACH,OAAOlB,QAAQ,CAACE,IAAT,GAAgBC,IAAhB,CAAsBH,QAAD,IAAc/B,eAAe,CAAC+B,QAAQ,CAAC9B,MAAV,CAAlD,CAAP;YACD;UACF;QAfuB,CAAjB,CAzDG;QA0EdiD,QAAQ,EAAE,MAAM7B,UAAU,CAACK,KAAX,CAAiB;UAC/BA,KAAK,EAAE;YAAA,IAAC;cAAEvC,MAAF;cAAUC,KAAK,GAAG,EAAlB;cAAsBC,UAAU,GAAG;YAAnC,CAAD,uEAA2C,EAA3C;YAAA,OAAmD;cACxDe,GAAG,EAAE,OADmD;cAExDe,MAAM,EAAEjC,wBAAwB,CAAC;gBAAEC,MAAF;gBAAUC,KAAV;gBAAiBC;cAAjB,CAAD;YAFwB,CAAnD;UAAA,CADwB;UAK/B0D,YAAY,EAAGJ,MAAD,IAAY;YACxB,IAAIA,MAAJ,EAAY;cACV,OAAO,CAAC,GAAGA,MAAM,CAACQ,GAAP,CAAW;gBAAA,IAAC;kBAAEd;gBAAF,CAAD;gBAAA,OAAa;kBAAED,IAAI,EAAE5B,UAAR;kBAAoB6B;gBAApB,CAAb;cAAA,CAAX,CAAJ,EAAwD;gBAAED,IAAI,EAAE5B,UAAR;gBAAoB6B,EAAE,EAAE;cAAxB,CAAxD,CAAP;YACD,CAFD,MAGK;cACH,OAAO,CAAC;gBAAED,IAAI,EAAE5B,UAAR;gBAAoB6B,EAAE,EAAE;cAAxB,CAAD,CAAP;YACD;UACF;QAZ8B,CAAjB,CA1EF;QAwFde,OAAO,EAAE,MAAM/B,UAAU,CAACK,KAAX,CAAiB;UAC9BA,KAAK,EAAE,YAAkD;YAAA,IAAjD;cAAEvC,MAAF;cAAUC,KAAK,GAAG,EAAlB;cAAsBC,UAAU,GAAG;YAAnC,CAAiD,uEAAP,EAAO;YACvD,OAAQ;cACNe,GAAG,EAAE,MADC;cAENe,MAAM,EAAEjC,wBAAwB,CAAC;gBAAEC,MAAF;gBAAUC,KAAV;gBAAiBC;cAAjB,CAAD;YAF1B,CAAR;UAID,CAN6B;UAO9BoD,iBAAiB,EAAGV,QAAD,KAAe;YAChCsB,IAAI,EAAEtB,QAAQ,CAACkB,UADiB;YAEhCK,MAAM,EAAEvB,QAAQ,CAACkB,UAAT,CAAoBK;UAFI,CAAf,CAPW;UAW9BP,YAAY,EAAGJ,MAAD,IAAY;YACxB,IAAIA,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAEU,IAAZ,EAAkB;cAChB,OAAO,CAAC,GAAGV,MAAM,CAACU,IAAP,CAAYF,GAAZ,CAAgB;gBAAA,IAAC;kBAAEd;gBAAF,CAAD;gBAAA,OAAa;kBAAED,IAAI,EAAE5B,UAAR;kBAAoB6B;gBAApB,CAAb;cAAA,CAAhB,CAAJ,EAA6D;gBAAED,IAAI,EAAE5B,UAAR;gBAAoB6B,EAAE,EAAE;cAAxB,CAA7D,CAAP;YACD,CAFD,MAGK;cACH,OAAO,CAAC;gBAAED,IAAI,EAAE5B,UAAR;gBAAoB6B,EAAE,EAAE;cAAxB,CAAD,CAAP;YACD;UACF;QAlB6B,CAAjB;MAxFD,CAAhB;MA8GA,OAAO/B,SAAS,CAACgB,OAAD,CAAhB;IACD,CAhIiB;IAiIlB,GAAGf;EAjIe,CAAD,CAAnB;AAmID"},"metadata":{},"sourceType":"module"}